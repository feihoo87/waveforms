# Generated from waveforms/Waveform.g4 by ANTLR 4.11.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,22,169,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,
        1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,
        11,1,11,3,11,73,8,11,1,12,4,12,76,8,12,11,12,12,12,77,1,12,1,12,
        5,12,82,8,12,10,12,12,12,85,9,12,3,12,87,8,12,1,12,1,12,4,12,91,
        8,12,11,12,12,12,92,3,12,95,8,12,1,12,1,12,3,12,99,8,12,1,12,4,12,
        102,8,12,11,12,12,12,103,3,12,106,8,12,1,13,4,13,109,8,13,11,13,
        12,13,110,1,14,1,14,3,14,115,8,14,1,14,1,14,1,15,1,15,5,15,121,8,
        15,10,15,12,15,124,9,15,1,15,1,15,1,15,5,15,129,8,15,10,15,12,15,
        132,9,15,1,15,3,15,135,8,15,1,16,1,16,1,16,1,16,1,16,1,16,3,16,143,
        8,16,1,17,1,17,5,17,147,8,17,10,17,12,17,150,9,17,1,18,1,18,1,18,
        1,19,1,19,1,19,1,20,1,20,1,20,1,21,4,21,162,8,21,11,21,12,21,163,
        1,21,1,21,1,22,1,22,0,0,23,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,
        9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,
        20,41,21,43,22,45,0,1,0,8,2,0,69,69,101,101,2,0,43,43,45,45,3,0,
        10,10,13,13,34,34,3,0,10,10,13,13,39,39,3,0,65,90,95,95,97,122,4,
        0,48,57,65,90,95,95,97,122,3,0,9,10,13,13,32,32,1,0,48,57,186,0,
        1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,
        0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,
        0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,
        0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,
        0,0,0,0,43,1,0,0,0,1,47,1,0,0,0,3,49,1,0,0,0,5,51,1,0,0,0,7,53,1,
        0,0,0,9,55,1,0,0,0,11,57,1,0,0,0,13,59,1,0,0,0,15,61,1,0,0,0,17,
        63,1,0,0,0,19,65,1,0,0,0,21,67,1,0,0,0,23,72,1,0,0,0,25,94,1,0,0,
        0,27,108,1,0,0,0,29,114,1,0,0,0,31,134,1,0,0,0,33,142,1,0,0,0,35,
        144,1,0,0,0,37,151,1,0,0,0,39,154,1,0,0,0,41,157,1,0,0,0,43,161,
        1,0,0,0,45,167,1,0,0,0,47,48,5,61,0,0,48,2,1,0,0,0,49,50,5,94,0,
        0,50,4,1,0,0,0,51,52,5,42,0,0,52,6,1,0,0,0,53,54,5,47,0,0,54,8,1,
        0,0,0,55,56,5,43,0,0,56,10,1,0,0,0,57,58,5,45,0,0,58,12,1,0,0,0,
        59,60,5,40,0,0,60,14,1,0,0,0,61,62,5,41,0,0,62,16,1,0,0,0,63,64,
        5,44,0,0,64,18,1,0,0,0,65,66,5,91,0,0,66,20,1,0,0,0,67,68,5,93,0,
        0,68,22,1,0,0,0,69,73,3,25,12,0,70,73,3,27,13,0,71,73,3,29,14,0,
        72,69,1,0,0,0,72,70,1,0,0,0,72,71,1,0,0,0,73,24,1,0,0,0,74,76,3,
        45,22,0,75,74,1,0,0,0,76,77,1,0,0,0,77,75,1,0,0,0,77,78,1,0,0,0,
        78,86,1,0,0,0,79,83,5,46,0,0,80,82,3,45,22,0,81,80,1,0,0,0,82,85,
        1,0,0,0,83,81,1,0,0,0,83,84,1,0,0,0,84,87,1,0,0,0,85,83,1,0,0,0,
        86,79,1,0,0,0,86,87,1,0,0,0,87,95,1,0,0,0,88,90,5,46,0,0,89,91,3,
        45,22,0,90,89,1,0,0,0,91,92,1,0,0,0,92,90,1,0,0,0,92,93,1,0,0,0,
        93,95,1,0,0,0,94,75,1,0,0,0,94,88,1,0,0,0,95,105,1,0,0,0,96,98,7,
        0,0,0,97,99,7,1,0,0,98,97,1,0,0,0,98,99,1,0,0,0,99,101,1,0,0,0,100,
        102,3,45,22,0,101,100,1,0,0,0,102,103,1,0,0,0,103,101,1,0,0,0,103,
        104,1,0,0,0,104,106,1,0,0,0,105,96,1,0,0,0,105,106,1,0,0,0,106,26,
        1,0,0,0,107,109,3,45,22,0,108,107,1,0,0,0,109,110,1,0,0,0,110,108,
        1,0,0,0,110,111,1,0,0,0,111,28,1,0,0,0,112,115,3,25,12,0,113,115,
        3,27,13,0,114,112,1,0,0,0,114,113,1,0,0,0,115,116,1,0,0,0,116,117,
        5,106,0,0,117,30,1,0,0,0,118,122,5,34,0,0,119,121,8,2,0,0,120,119,
        1,0,0,0,121,124,1,0,0,0,122,120,1,0,0,0,122,123,1,0,0,0,123,125,
        1,0,0,0,124,122,1,0,0,0,125,135,5,34,0,0,126,130,5,39,0,0,127,129,
        8,3,0,0,128,127,1,0,0,0,129,132,1,0,0,0,130,128,1,0,0,0,130,131,
        1,0,0,0,131,133,1,0,0,0,132,130,1,0,0,0,133,135,5,39,0,0,134,118,
        1,0,0,0,134,126,1,0,0,0,135,32,1,0,0,0,136,137,5,112,0,0,137,143,
        5,105,0,0,138,143,5,101,0,0,139,140,5,105,0,0,140,141,5,110,0,0,
        141,143,5,102,0,0,142,136,1,0,0,0,142,138,1,0,0,0,142,139,1,0,0,
        0,143,34,1,0,0,0,144,148,7,4,0,0,145,147,7,5,0,0,146,145,1,0,0,0,
        147,150,1,0,0,0,148,146,1,0,0,0,148,149,1,0,0,0,149,36,1,0,0,0,150,
        148,1,0,0,0,151,152,5,42,0,0,152,153,5,42,0,0,153,38,1,0,0,0,154,
        155,5,60,0,0,155,156,5,60,0,0,156,40,1,0,0,0,157,158,5,62,0,0,158,
        159,5,62,0,0,159,42,1,0,0,0,160,162,7,6,0,0,161,160,1,0,0,0,162,
        163,1,0,0,0,163,161,1,0,0,0,163,164,1,0,0,0,164,165,1,0,0,0,165,
        166,6,21,0,0,166,44,1,0,0,0,167,168,7,7,0,0,168,46,1,0,0,0,18,0,
        72,77,83,86,92,94,98,103,105,110,114,122,130,134,142,148,163,1,6,
        0,0
    ]

class WaveformLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    NUMBER = 12
    REAL = 13
    INT = 14
    IMAG = 15
    STRING = 16
    CONSTANT = 17
    ID = 18
    POW = 19
    LSHIFT = 20
    RSHIFT = 21
    WS = 22

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'='", "'^'", "'*'", "'/'", "'+'", "'-'", "'('", "')'", "','", 
            "'['", "']'", "'**'", "'<<'", "'>>'" ]

    symbolicNames = [ "<INVALID>",
            "NUMBER", "REAL", "INT", "IMAG", "STRING", "CONSTANT", "ID", 
            "POW", "LSHIFT", "RSHIFT", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "NUMBER", "REAL", "INT", 
                  "IMAG", "STRING", "CONSTANT", "ID", "POW", "LSHIFT", "RSHIFT", 
                  "WS", "DIGIT" ]

    grammarFileName = "Waveform.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


